
/*============================================================*/

// Open the menu item modal
function openMenuItemModal(action) {
    document.getElementById("menuItem-modal").style.display = "block";
    document.querySelector("#menuItem-form button[type='submit']").style.display = "block"; 
    
    // Enable form fields
    disableFormFields("menuItem-form", false);

    // Update modal header text
    const header = document.getElementById("menuItemModal_header");

    if (action === "fill") {
        header.innerHTML = "FILLING UP <br> MENU ITEM FORM";
    } else if (action === "view") {
        header.innerHTML = "VIEWING <br> MENU ITEM FORM";
    } else if (action === "modify") {
        header.innerHTML = "MODIFYING <br> MENU ITEM FORM";
    } else if (action === "delete") {
        header.innerHTML = "DELETE THIS <br> MENU ITEM FORM?";
    }

    const container = document.querySelector('.modal');
    container.scrollTop = 0;
    
    const measurementTypeSelect = document.getElementById("measurement-type-menuItemModal");
    const unitMeasurementSelect = document.getElementById("unit-measurement-menuItemModal");

    // Clear previous options from the unit selection menus
    measurementTypeSelect.innerHTML = "";
    unitMeasurementSelect.innerHTML = "";
}

/*============================================================*/

// Close the menu item modal
function closeMenuItemModal() {
    const tableRows = document.querySelectorAll("#menuItem-table tbody tr");

    // Reset styles for each table row
    tableRows.forEach(tableRow => {
        tableRow.style.backgroundColor = "";
        tableRow.style.border = "";

        const cells = tableRow.querySelectorAll("td");
        cells.forEach(cell => {
            cell.style.border = "";
        });
    });

    // Reset styles for all buttons
    const buttons = document.querySelectorAll("#menuItem-table button");
    buttons.forEach(button => {
        button.style.backgroundColor = "";
        button.style.border = "";
        button.style.transform = "";
    });

    document.getElementById("menuItem-modal").style.display = "none";
    document.getElementById("menuItem-form").reset();

    var submitButton = document.querySelector("#menuItem-form button[type='submit']");
    submitButton.innerText = "Submit";
    submitButton.onclick = function(event) {
        addMenuItemOnTable(event);
    };
}

/*============================================================*/

function addIngredientToTheList() {

    // Get the values from the input fields
    const ingredientName = document.getElementById("ingredient-name-comboBox").value;
    const quantity = document.getElementById("quantity-consumed").value;
    const unitMeasurement = document.getElementById("unit-measurement-menuItemModal").value;
  
    // Check if all fields are filled
    if (!ingredientName || !quantity || !unitMeasurement) {
      alert("Please fill out all ingredient details before adding.");
      return;
    }
  
    // Create the formatted ingredient list item with delete button
    const ingredientListItem = `
      <span class="ingredient-item">
        <button class="remove-ingredient-from-list-btn" type="button" onclick="removeIngredient(this)">x</button>
        ${ingredientName} ${quantity} ${unitMeasurement}
        <br>
      </span>
    `;
  
    // Get the current ingredient list element
    const ingredientList = document.querySelector("span#ingredient-list");
  
    // Add the new ingredient list item to the existing list
    ingredientList.innerHTML += ingredientListItem;
  
    // Reset the ingredient list form
    document.getElementById("ingredient-name-comboBox").selectedIndex = 0;
    document.getElementById("quantity-consumed").value = "";
    document.getElementById("measurement-type-menuItemModal").innerHTML = "";
    document.getElementById("unit-measurement-menuItemModal").innerHTML = "";
}

/*============================================================*/

function removeIngredient(button) {
    // Get the entire ingredient list item including the <br>
    const entireIngredientItem = button.closest(".ingredient-item"); 
    entireIngredientItem.remove(); // Remove the entire ingredient item
}

/*============================================================*/

function addMenuItemOnTable() {

    // Get form element
    const menuItemForm = document.getElementById("menuItem-form");

    // Check if form is valid before continuing
    if (!menuItemForm.checkValidity()) {
        menuItemForm.reportValidity(); // Show browser validation message
        return; // Prevent further execution if form is invalid
    }

    // Getting form values
    const menuItemName = document.getElementById("menu-item-name").value;
    const menuCategory = document.getElementById("menu-category").value;
    const menuItemPrice = document.getElementById("menu-item-price").value;
    const menuItemDescription = document.getElementById("menu-item-description").value;
    const ingredientList = document.getElementById("ingredient-list").innerHTML;

    // Creating a new table row element
    const newRow = document.createElement("tr");

    // Creating menuItem data object
    const menuItemData = {
        menuItemName,
        menuCategory,
        menuItemPrice,
        menuItemDescription,
        ingredientList
    };

    // Setting menuItem data as a custom attribute on the row
    newRow.setAttribute("data-menuItem", JSON.stringify(menuItemData));  

    // Creating cells
    const menuItemNameCell = document.createElement("td");
    const menuCategoryCell = document.createElement("td");
    const menuItemPriceCell = document.createElement("td");
    const ingredientListCell = document.createElement("td");
    const actionCell = document.createElement("td");

    // Setting cell content
    menuItemNameCell.textContent = menuItemName;
    menuCategoryCell.textContent = menuCategory;
    menuItemPriceCell.textContent = "Php " + menuItemPrice;
    ingredientListCell.innerHTML = ingredientList;

    // **Adding class to ingredientListCell**
    ingredientListCell.classList.add("left-align");  // Use classList for modern approach  

    const buttonContainer = document.createElement("div"); // Sub-cell element

    const viewButton = document.createElement("button");
    viewButton.textContent = "View Info";
    viewButton.classList.add("view-info-btn");
    viewButton.onclick = menuItemRow_handleButtonAction; // Set onclick event

    const modifyButton = document.createElement("button");
    modifyButton.textContent = "Modify";
    modifyButton.classList.add("modify-btn");
    modifyButton.onclick = menuItemRow_handleButtonAction; // Set onclick event

    const deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete";
    deleteButton.classList.add("delete-btn");
    deleteButton.onclick = menuItemRow_handleButtonAction; // Set onclick event

    buttonContainer.appendChild(viewButton);
    buttonContainer.appendChild(modifyButton);
    buttonContainer.appendChild(deleteButton);

    actionCell.appendChild(buttonContainer);

    // Append cells to the new row
    newRow.appendChild(menuItemNameCell);
    newRow.appendChild(menuCategoryCell);
    newRow.appendChild(menuItemPriceCell);
    newRow.appendChild(ingredientListCell);
    newRow.appendChild(actionCell);

    // Appending a new row to table
    var table = document.getElementById("menuItem-table");
    table.querySelector("tbody").appendChild(newRow);

    // Clear the form after adding
    document.getElementById("menuItem-form").reset();

    // Close the modal
    closeMenuItemModal();

    hideIngredientRemoveButtons();
}

/*============================================================*/

function hideIngredientRemoveButtons() {
    // Get the table body element
    const tableBody = document.getElementById("menuItem-table_body");
  
    // Get all buttons with the class in the third row (assuming it exists)
    const buttons = tableBody.querySelectorAll("td:nth-child(4) .remove-ingredient-from-list-btn");
  
    // Set display to none for all buttons
    buttons.forEach(button => button.style.display = "none");
}
    
/*============================================================*/

function menuItemRow_handleButtonAction(event) {
    const clickedButton = event.target;
    const tableRow = clickedButton.closest("tr");

    const isButtonAction = clickedButton.textContent === "View Info" || clickedButton.textContent === "Modify" || clickedButton.textContent === "Delete";

    if (isButtonAction) {
        
        // Get menuItem data
        const menuItemDataString = tableRow.getAttribute("data-menuItem");
        const menuItemData = JSON.parse(menuItemDataString);

        // Fill form with menuItem data
        fillMenuItemForm(menuItemData);

        if (clickedButton.textContent === "View Info") {
            
            // Highlight button for action
            clickedButton.style.transform = "scale(1.15)";

            // Highlight cell row for action
            tableRow.style.backgroundColor = "#64b664"; 

            // Show the modal
            openMenuItemModal('view');

            // Fill form with menuItem data
            fillMenuItemForm(menuItemData);

            document.querySelector("#menuItem-form button[type='submit']").style.display = "none"; 

            // Disable form fields
            disableFormFields("menuItem-form", true);   

            hideIngredientRemoveButtons();

        } else if (clickedButton.textContent === "Modify") {
            
            // Highlight button for action
            clickedButton.style.transform = "scale(1.15)";
            
            // Highlight cell row for action
            tableRow.style.backgroundColor = "#e2d032"; 

            // Show the modal
            openMenuItemModal('modify');

            // Fill form with menuItem data
            fillMenuItemForm(menuItemData);

            // Change submit button text to "Save Changes"
            const submitButton = document.querySelector("#menuItem-form button[type='submit']");
            submitButton.textContent = "Save Changes";

            // Attach function to save changes
            submitButton.onclick = function(event) {
                menuItemInfo_saveChanges(event, tableRow);
            };

            hideIngredientRemoveButtons();

        } else if (clickedButton.textContent === "Delete") {
            
            // Highlight button for action
            clickedButton.style.transform = "scale(1.15)";

            // Highlight cell row for confirmation
            tableRow.style.backgroundColor = "#ce4e4e";

            // Show the modal
            openMenuItemModal('delete');

            // Fill form with menuItem data
            fillMenuItemForm(menuItemData);

            // Change submit button text to "Save Changes"
            const submitButton = document.querySelector("#menuItem-form button[type='submit']");
            submitButton.textContent = "Delete";

            // Attach function to save changes
            submitButton.onclick = function(event) {
                deleteMenuItemTableRowData(event, tableRow);
            };

            // Disable form fields
            disableFormFields("menuItem-form", true);       

            hideIngredientRemoveButtons();
        }
    }

    hideIngredientRemoveButtons();
    
}


/*============================================================*/


// Add event listener to the table body
const menuItemTableBody = document.getElementById("menuItem-table").querySelector("tbody");
menuItemTableBody.addEventListener("click", menuItemRow_handleButtonAction);


/*============================================================*/


function fillMenuItemForm(menuItemData) {
    // Get modal elements
    const menuItemNameInput = document.getElementById("menu-item-name");
    const menuCategoryInput = document.getElementById("menu-category");
    const menuItemPriceInput = document.getElementById("menu-item-price");
    const menuItemDescriptionInput = document.getElementById("menu-item-description");
    const ingredientListInput = document.getElementById("ingredient-list");

    // Fill the form fields with menuItem data
    menuItemNameInput.value = menuItemData.menuItemName;
    menuCategoryInput.value = menuItemData.menuCategory;
    menuItemPriceInput.value = menuItemData.menuItemPrice;
    menuItemDescriptionInput.value = menuItemData.menuItemDescription;
    ingredientListInput.innerHTML = menuItemData.ingredientList;
}


/*============================================================*/


function menuItemInfo_saveChanges(event, tableRow) {

    // Get form element
    const menuItemForm = document.getElementById("menuItem-form");
  
    // Check if form is valid before continuing
    if (!menuItemForm.checkValidity()) {
      menuItemForm.reportValidity(); // Show browser validation message
      return; // Prevent further execution if form is invalid
    }

    // Getting form values
    const menuItemName = document.getElementById("menu-item-name").value;
    const menuCategory = document.getElementById("menu-category").value;
    const menuItemPrice = document.getElementById("menu-item-price").value;
    const menuItemDescription = document.getElementById("menu-item-description").value;
    const ingredientList = document.getElementById("ingredient-list").innerHTML;

    // Creating menuItem data object
    const menuItemData = {
        menuItemName,
        menuCategory,
        menuItemPrice,
        menuItemDescription,
        ingredientList
    };

    // Update the data-menuItem attribute of the table row
    tableRow.setAttribute("data-menuItem", JSON.stringify(menuItemData));

    // Update the content of the table row cells
    const cells = tableRow.querySelectorAll("td");
    cells[0].textContent = menuItemName;
    cells[1].textContent = menuCategory;
    cells[2].textContent = "Php " + menuItemPrice;
    cells[3].innerHTML = ingredientList;

    // Reset styles for the table cells
    cells.forEach(cell => {
        cell.style.backgroundColor = "";
        cell.style.border = "";
    });

    // Close the modal
    closeMenuItemModal();

    hideIngredientRemoveButtons();

    updateMenuItemComboBoxes();
}


/*============================================================*/


function deleteMenuItemTableRowData(event, tableRow) {
    event.preventDefault();

    // Get menuItem data from the table row
    const menuItemDataString = tableRow.getAttribute("data-menuItem");
    const menuItemData = JSON.parse(menuItemDataString);
    const menuItemName = menuItemData.menuItemName;

    // Highlighting table cells with data that is now modified
    highlightModifiedTableCells("menuItem-table", 1, menuItemName, "#ce4e4e");
    
    tableRow.remove();
    
    closeMenuItemModal(); // Close the modal after deleting the row

    updateMenuItemComboBoxes();
}


/*============================================================*/